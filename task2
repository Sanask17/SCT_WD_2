<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .container {
            text-align: center;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(156, 130, 130, 0.2);
            max-width: 90%;
            width: 400px;
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #2c3e50;
        }

        #gameboard {
            display: grid;
            grid-template-columns: repeat(3, 4rem);
            grid-template-rows: repeat(3, 4rem);
            gap: 0.5rem;
            margin: 1rem auto;
        }

        .cell {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            cursor: pointer;
            border: 0.125rem solid #34495e;
            border-radius: 0.5rem;
            transition: background-color 0.2s ease;
            background-color: #fcf381;
        }

        .cell:hover {
            background-color: #ecf0f1;
        }

        .cell.X {
            color: #011103;
        }

        .cell.O {
            color: #610ef1;
        }

        #reset-button {
            margin-top: 1rem;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        #reset-button:hover {
            background-color: #4baff3;
        }

        #message-container {
            margin-top: 1rem;
            font-size: 1.25rem;
            color: #2c3e50;
            min-height: 1.5em;
        }
       .winning-message {
          color: #27ae60;
        }
        .draw-message {
          color: #f39c12;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container">
        <h1>   Tic-Tac-Toe   </h1>
        <div id="gameboard">
            <div class="cell" data-cell-index="0"></div>
            <div class="cell" data-cell-index="1"></div>
            <div class="cell" data-cell-index="2"></div>
            <div class="cell" data-cell-index="3"></div>
            <div class="cell" data-cell-index="4"></div>
            <div class="cell" data-cell-index="5"></div>
            <div class="cell" data-cell-index="6"></div>
            <div class="cell" data-cell-index="7"></div>
            <div class="cell" data-cell-index="8"></div>
        </div>
        <div id="message-container"></div>
        <button id="reset-button">Reset</button>
    </div>
    <script>
        const board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';
        let isGameOver = false;
        const winPatterns = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];
        const cells = document.querySelectorAll('.cell');
        const messageContainer = document.getElementById('message-container');

        function handleCellClick(event) {
            const cellIndex = event.target.dataset.cellIndex;
            if (isGameOver || board[cellIndex] !== '') return;
            board[cellIndex] = currentPlayer;
            event.target.textContent = currentPlayer;
            event.target.classList.add(currentPlayer);
            if (checkWin()) {
                isGameOver = true;
                messageContainer.textContent = `Player ${currentPlayer} wins!`;
                messageContainer.classList.add('winning-message');
            } else if (checkDraw()) {
                isGameOver = true;
                messageContainer.textContent = "It's a draw!";
                messageContainer.classList.add('draw-message');
            } else {
                switchPlayer();
            }
        }
        function checkWin() {
            for (let pattern of winPatterns) {
                const [a, b, c] = pattern;
                if (board[a] && board[a] === board[b] && board[a] === board[c]) return true;
            }
            return false;
        }
        function checkDraw() {
            return board.every(cell => cell !== '');
        }
        function switchPlayer() {
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        }
        function resetGame() {
            board.fill('');
            isGameOver = false;
            currentPlayer = 'X';
            messageContainer.textContent = '';
            messageContainer.classList.remove('winning-message');
            messageContainer.classList.remove('draw-message');
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('X');
                cell.classList.remove('O');
                cell.addEventListener('click', handleCellClick, { once: true });
            });
        }
        cells.forEach(cell => cell.addEventListener('click', handleCellClick, { once: true }));
        document.getElementById('reset-button').addEventListener('click', resetGame);
    </script>
</body>
</html>

